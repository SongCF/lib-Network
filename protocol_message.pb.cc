// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace PetOnline {

void protobuf_ShutdownFile_protocol_5fmessage_2eproto() {
  delete CoordinateInfo::default_instance_;
  delete UserInfo::default_instance_;
  delete ItemInfo::default_instance_;
  delete ExchangeInfo::default_instance_;
  delete RegistReq::default_instance_;
  delete RegistRsp::default_instance_;
  delete LoginReq::default_instance_;
  delete LoginRsp::default_instance_;
  delete ExchangeReq::default_instance_;
  delete ExchangeRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_protocol_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_protocol_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CoordinateInfo::default_instance_ = new CoordinateInfo();
  UserInfo::default_instance_ = new UserInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  ExchangeInfo::default_instance_ = new ExchangeInfo();
  RegistReq::default_instance_ = new RegistReq();
  RegistRsp::default_instance_ = new RegistRsp();
  LoginReq::default_instance_ = new LoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  ExchangeReq::default_instance_ = new ExchangeReq();
  ExchangeRsp::default_instance_ = new ExchangeRsp();
  CoordinateInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ExchangeInfo::default_instance_->InitAsDefaultInstance();
  RegistReq::default_instance_->InitAsDefaultInstance();
  RegistRsp::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  ExchangeReq::default_instance_->InitAsDefaultInstance();
  ExchangeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_5fmessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protocol_5fmessage_2eproto_once_);
void protobuf_AddDesc_protocol_5fmessage_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protocol_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_protocol_5fmessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_5fmessage_2eproto {
  StaticDescriptorInitializer_protocol_5fmessage_2eproto() {
    protobuf_AddDesc_protocol_5fmessage_2eproto();
  }
} static_descriptor_initializer_protocol_5fmessage_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CoordinateInfo::kLatitudeFieldNumber;
const int CoordinateInfo::kLongitudeFieldNumber;
#endif  // !_MSC_VER

CoordinateInfo::CoordinateInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CoordinateInfo::InitAsDefaultInstance() {
}

CoordinateInfo::CoordinateInfo(const CoordinateInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CoordinateInfo::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinateInfo::~CoordinateInfo() {
  SharedDtor();
}

void CoordinateInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CoordinateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CoordinateInfo& CoordinateInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

CoordinateInfo* CoordinateInfo::default_instance_ = NULL;

CoordinateInfo* CoordinateInfo::New() const {
  return new CoordinateInfo;
}

void CoordinateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CoordinateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // required float longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoordinateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // required float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

}

int CoordinateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // required float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CoordinateInfo*>(&from));
}

void CoordinateInfo::MergeFrom(const CoordinateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
}

void CoordinateInfo::CopyFrom(const CoordinateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CoordinateInfo::Swap(CoordinateInfo* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CoordinateInfo::GetTypeName() const {
  return "PetOnline.CoordinateInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kCoordinateFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinate_ = const_cast< ::PetOnline::CoordinateInfo*>(
      ::PetOnline::CoordinateInfo::internal_default_instance());
#else
  coordinate_ = const_cast< ::PetOnline::CoordinateInfo*>(&::PetOnline::CoordinateInfo::default_instance());
#endif
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coordinate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete coordinate_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInfo& UserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::PetOnline::CoordinateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coordinate;
        break;
      }

      // optional .PetOnline.CoordinateInfo coordinate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // optional .PetOnline.CoordinateInfo coordinate = 2;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->coordinate(), output);
  }

}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional .PetOnline.CoordinateInfo coordinate = 2;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInfo*>(&from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::PetOnline::CoordinateInfo::MergeFrom(from.coordinate());
    }
  }
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserInfo::GetTypeName() const {
  return "PetOnline.UserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kItemCountFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemInfo& ItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemInfo*>(&from));
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemInfo::GetTypeName() const {
  return "PetOnline.ItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeInfo::kIsExchangedFieldNumber;
const int ExchangeInfo::kOnhandItemFieldNumber;
const int ExchangeInfo::kNeedItemFieldNumber;
const int ExchangeInfo::kExTimeFieldNumber;
const int ExchangeInfo::kExchangedUserFieldNumber;
#endif  // !_MSC_VER

ExchangeInfo::ExchangeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExchangeInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  onhand_item_ = const_cast< ::PetOnline::ItemInfo*>(
      ::PetOnline::ItemInfo::internal_default_instance());
#else
  onhand_item_ = const_cast< ::PetOnline::ItemInfo*>(&::PetOnline::ItemInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  need_item_ = const_cast< ::PetOnline::ItemInfo*>(
      ::PetOnline::ItemInfo::internal_default_instance());
#else
  need_item_ = const_cast< ::PetOnline::ItemInfo*>(&::PetOnline::ItemInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  exchanged_user_ = const_cast< ::PetOnline::UserInfo*>(
      ::PetOnline::UserInfo::internal_default_instance());
#else
  exchanged_user_ = const_cast< ::PetOnline::UserInfo*>(&::PetOnline::UserInfo::default_instance());
#endif
}

ExchangeInfo::ExchangeInfo(const ExchangeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeInfo::SharedCtor() {
  _cached_size_ = 0;
  is_exchanged_ = false;
  onhand_item_ = NULL;
  need_item_ = NULL;
  ex_time_ = 0u;
  exchanged_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeInfo::~ExchangeInfo() {
  SharedDtor();
}

void ExchangeInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete onhand_item_;
    delete need_item_;
    delete exchanged_user_;
  }
}

void ExchangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExchangeInfo& ExchangeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ExchangeInfo* ExchangeInfo::default_instance_ = NULL;

ExchangeInfo* ExchangeInfo::New() const {
  return new ExchangeInfo;
}

void ExchangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_exchanged_ = false;
    if (has_onhand_item()) {
      if (onhand_item_ != NULL) onhand_item_->::PetOnline::ItemInfo::Clear();
    }
    if (has_need_item()) {
      if (need_item_ != NULL) need_item_->::PetOnline::ItemInfo::Clear();
    }
    ex_time_ = 0u;
    if (has_exchanged_user()) {
      if (exchanged_user_ != NULL) exchanged_user_->::PetOnline::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ExchangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_exchanged = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exchanged_)));
          set_has_is_exchanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onhand_item;
        break;
      }

      // optional .PetOnline.ItemInfo onhand_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onhand_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onhand_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_need_item;
        break;
      }

      // optional .PetOnline.ItemInfo need_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_need_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ex_time;
        break;
      }

      // optional uint32 ex_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ex_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ex_time_)));
          set_has_ex_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exchanged_user;
        break;
      }

      // optional .PetOnline.UserInfo exchanged_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchanged_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchanged_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_exchanged = 1;
  if (has_is_exchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_exchanged(), output);
  }

  // optional .PetOnline.ItemInfo onhand_item = 2;
  if (has_onhand_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->onhand_item(), output);
  }

  // optional .PetOnline.ItemInfo need_item = 3;
  if (has_need_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->need_item(), output);
  }

  // optional uint32 ex_time = 4;
  if (has_ex_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ex_time(), output);
  }

  // optional .PetOnline.UserInfo exchanged_user = 5;
  if (has_exchanged_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->exchanged_user(), output);
  }

}

int ExchangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_exchanged = 1;
    if (has_is_exchanged()) {
      total_size += 1 + 1;
    }

    // optional .PetOnline.ItemInfo onhand_item = 2;
    if (has_onhand_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onhand_item());
    }

    // optional .PetOnline.ItemInfo need_item = 3;
    if (has_need_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_item());
    }

    // optional uint32 ex_time = 4;
    if (has_ex_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ex_time());
    }

    // optional .PetOnline.UserInfo exchanged_user = 5;
    if (has_exchanged_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchanged_user());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExchangeInfo*>(&from));
}

void ExchangeInfo::MergeFrom(const ExchangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_exchanged()) {
      set_is_exchanged(from.is_exchanged());
    }
    if (from.has_onhand_item()) {
      mutable_onhand_item()->::PetOnline::ItemInfo::MergeFrom(from.onhand_item());
    }
    if (from.has_need_item()) {
      mutable_need_item()->::PetOnline::ItemInfo::MergeFrom(from.need_item());
    }
    if (from.has_ex_time()) {
      set_ex_time(from.ex_time());
    }
    if (from.has_exchanged_user()) {
      mutable_exchanged_user()->::PetOnline::UserInfo::MergeFrom(from.exchanged_user());
    }
  }
}

void ExchangeInfo::CopyFrom(const ExchangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_onhand_item()) {
    if (!this->onhand_item().IsInitialized()) return false;
  }
  if (has_need_item()) {
    if (!this->need_item().IsInitialized()) return false;
  }
  if (has_exchanged_user()) {
    if (!this->exchanged_user().IsInitialized()) return false;
  }
  return true;
}

void ExchangeInfo::Swap(ExchangeInfo* other) {
  if (other != this) {
    std::swap(is_exchanged_, other->is_exchanged_);
    std::swap(onhand_item_, other->onhand_item_);
    std::swap(need_item_, other->need_item_);
    std::swap(ex_time_, other->ex_time_);
    std::swap(exchanged_user_, other->exchanged_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExchangeInfo::GetTypeName() const {
  return "PetOnline.ExchangeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistReq::kAccountFieldNumber;
const int RegistReq::kPasswdFieldNumber;
const int RegistReq::kNicknameFieldNumber;
#endif  // !_MSC_VER

RegistReq::RegistReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistReq::InitAsDefaultInstance() {
}

RegistReq::RegistReq(const RegistReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistReq::~RegistReq() {
  SharedDtor();
}

void RegistReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistReq& RegistReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

RegistReq* RegistReq::default_instance_ = NULL;

RegistReq* RegistReq::New() const {
  return new RegistReq;
}

void RegistReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional string passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

}

int RegistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistReq*>(&from));
}

void RegistReq::MergeFrom(const RegistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void RegistReq::CopyFrom(const RegistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistReq::Swap(RegistReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistReq::GetTypeName() const {
  return "PetOnline.RegistReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistRsp::kRspCodeFieldNumber;
const int RegistRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

RegistRsp::RegistRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistRsp::InitAsDefaultInstance() {
}

RegistRsp::RegistRsp(const RegistRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistRsp::~RegistRsp() {
  SharedDtor();
}

void RegistRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistRsp& RegistRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

RegistRsp* RegistRsp::default_instance_ = NULL;

RegistRsp* RegistRsp::New() const {
  return new RegistRsp;
}

void RegistRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

}

int RegistRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistRsp*>(&from));
}

void RegistRsp::MergeFrom(const RegistRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void RegistRsp::CopyFrom(const RegistRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistRsp::Swap(RegistRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistRsp::GetTypeName() const {
  return "PetOnline.RegistRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kUserIdFieldNumber;
const int LoginReq::kCoordinateFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinate_ = const_cast< ::PetOnline::CoordinateInfo*>(
      ::PetOnline::CoordinateInfo::internal_default_instance());
#else
  coordinate_ = const_cast< ::PetOnline::CoordinateInfo*>(&::PetOnline::CoordinateInfo::default_instance());
#endif
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  coordinate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete coordinate_;
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginReq& LoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::PetOnline::CoordinateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coordinate;
        break;
      }

      // optional .PetOnline.CoordinateInfo coordinate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional .PetOnline.CoordinateInfo coordinate = 2;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->coordinate(), output);
  }

}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional .PetOnline.CoordinateInfo coordinate = 2;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginReq*>(&from));
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_coordinate()) {
      mutable_coordinate()->::PetOnline::CoordinateInfo::MergeFrom(from.coordinate());
    }
  }
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(coordinate_, other->coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginReq::GetTypeName() const {
  return "PetOnline.LoginReq";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kRspCodeFieldNumber;
const int LoginRsp::kExchangedFieldNumber;
const int LoginRsp::kUnshelveFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRsp& LoginRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  exchanged_.Clear();
  unshelve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exchanged;
        break;
      }

      // repeated .PetOnline.ExchangeInfo exchanged = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchanged()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exchanged;
        if (input->ExpectTag(26)) goto parse_unshelve;
        break;
      }

      // repeated .PetOnline.ExchangeInfo unshelve = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unshelve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unshelve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unshelve;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .PetOnline.ExchangeInfo exchanged = 2;
  for (int i = 0; i < this->exchanged_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->exchanged(i), output);
  }

  // repeated .PetOnline.ExchangeInfo unshelve = 3;
  for (int i = 0; i < this->unshelve_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->unshelve(i), output);
  }

}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  // repeated .PetOnline.ExchangeInfo exchanged = 2;
  total_size += 1 * this->exchanged_size();
  for (int i = 0; i < this->exchanged_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchanged(i));
  }

  // repeated .PetOnline.ExchangeInfo unshelve = 3;
  total_size += 1 * this->unshelve_size();
  for (int i = 0; i < this->unshelve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unshelve(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRsp*>(&from));
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchanged_.MergeFrom(from.exchanged_);
  unshelve_.MergeFrom(from.unshelve_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < exchanged_size(); i++) {
    if (!this->exchanged(i).IsInitialized()) return false;
  }
  for (int i = 0; i < unshelve_size(); i++) {
    if (!this->unshelve(i).IsInitialized()) return false;
  }
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    exchanged_.Swap(&other->exchanged_);
    unshelve_.Swap(&other->unshelve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginRsp::GetTypeName() const {
  return "PetOnline.LoginRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeReq::kUserIdFieldNumber;
const int ExchangeReq::kOnhandItemFieldNumber;
const int ExchangeReq::kNeedItemFieldNumber;
#endif  // !_MSC_VER

ExchangeReq::ExchangeReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExchangeReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  onhand_item_ = const_cast< ::PetOnline::ItemInfo*>(
      ::PetOnline::ItemInfo::internal_default_instance());
#else
  onhand_item_ = const_cast< ::PetOnline::ItemInfo*>(&::PetOnline::ItemInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  need_item_ = const_cast< ::PetOnline::ItemInfo*>(
      ::PetOnline::ItemInfo::internal_default_instance());
#else
  need_item_ = const_cast< ::PetOnline::ItemInfo*>(&::PetOnline::ItemInfo::default_instance());
#endif
}

ExchangeReq::ExchangeReq(const ExchangeReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  onhand_item_ = NULL;
  need_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeReq::~ExchangeReq() {
  SharedDtor();
}

void ExchangeReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete onhand_item_;
    delete need_item_;
  }
}

void ExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExchangeReq& ExchangeReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ExchangeReq* ExchangeReq::default_instance_ = NULL;

ExchangeReq* ExchangeReq::New() const {
  return new ExchangeReq;
}

void ExchangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    if (has_onhand_item()) {
      if (onhand_item_ != NULL) onhand_item_->::PetOnline::ItemInfo::Clear();
    }
    if (has_need_item()) {
      if (need_item_ != NULL) need_item_->::PetOnline::ItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onhand_item;
        break;
      }

      // optional .PetOnline.ItemInfo onhand_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onhand_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onhand_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_need_item;
        break;
      }

      // optional .PetOnline.ItemInfo need_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_need_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional .PetOnline.ItemInfo onhand_item = 2;
  if (has_onhand_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->onhand_item(), output);
  }

  // optional .PetOnline.ItemInfo need_item = 3;
  if (has_need_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->need_item(), output);
  }

}

int ExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional .PetOnline.ItemInfo onhand_item = 2;
    if (has_onhand_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onhand_item());
    }

    // optional .PetOnline.ItemInfo need_item = 3;
    if (has_need_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_item());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExchangeReq*>(&from));
}

void ExchangeReq::MergeFrom(const ExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_onhand_item()) {
      mutable_onhand_item()->::PetOnline::ItemInfo::MergeFrom(from.onhand_item());
    }
    if (from.has_need_item()) {
      mutable_need_item()->::PetOnline::ItemInfo::MergeFrom(from.need_item());
    }
  }
}

void ExchangeReq::CopyFrom(const ExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_onhand_item()) {
    if (!this->onhand_item().IsInitialized()) return false;
  }
  if (has_need_item()) {
    if (!this->need_item().IsInitialized()) return false;
  }
  return true;
}

void ExchangeReq::Swap(ExchangeReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(onhand_item_, other->onhand_item_);
    std::swap(need_item_, other->need_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExchangeReq::GetTypeName() const {
  return "PetOnline.ExchangeReq";
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeRsp::kRspCodeFieldNumber;
const int ExchangeRsp::kExInfoFieldNumber;
#endif  // !_MSC_VER

ExchangeRsp::ExchangeRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExchangeRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ex_info_ = const_cast< ::PetOnline::ExchangeInfo*>(
      ::PetOnline::ExchangeInfo::internal_default_instance());
#else
  ex_info_ = const_cast< ::PetOnline::ExchangeInfo*>(&::PetOnline::ExchangeInfo::default_instance());
#endif
}

ExchangeRsp::ExchangeRsp(const ExchangeRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ex_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeRsp::~ExchangeRsp() {
  SharedDtor();
}

void ExchangeRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ex_info_;
  }
}

void ExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExchangeRsp& ExchangeRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ExchangeRsp* ExchangeRsp::default_instance_ = NULL;

ExchangeRsp* ExchangeRsp::New() const {
  return new ExchangeRsp;
}

void ExchangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    if (has_ex_info()) {
      if (ex_info_ != NULL) ex_info_->::PetOnline::ExchangeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ex_info;
        break;
      }

      // optional .PetOnline.ExchangeInfo ex_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ex_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ex_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional .PetOnline.ExchangeInfo ex_info = 2;
  if (has_ex_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ex_info(), output);
  }

}

int ExchangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional .PetOnline.ExchangeInfo ex_info = 2;
    if (has_ex_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ex_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExchangeRsp*>(&from));
}

void ExchangeRsp::MergeFrom(const ExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_ex_info()) {
      mutable_ex_info()->::PetOnline::ExchangeInfo::MergeFrom(from.ex_info());
    }
  }
}

void ExchangeRsp::CopyFrom(const ExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ex_info()) {
    if (!this->ex_info().IsInitialized()) return false;
  }
  return true;
}

void ExchangeRsp::Swap(ExchangeRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(ex_info_, other->ex_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExchangeRsp::GetTypeName() const {
  return "PetOnline.ExchangeRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PetOnline

// @@protoc_insertion_point(global_scope)
